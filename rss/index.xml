<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Seturne]]></title><description><![CDATA[Blog for something]]></description><link>https://seturne.github.io/hubpress.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 28 May 2017 12:11:43 GMT</lastBuildDate><atom:link href="https://seturne.github.io/hubpress.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Let it be in haskell]]></title><description><![CDATA[<div class="ulist">
<ul>
<li>
<p>Very similar to <code>where</code> are <code>let</code>. And <code>where</code> is at the end of function but <code>let</code> is anywhere</p>
</li>
<li>
<p>The differemce is that <code>let</code> are expressions themselves. <code>where</code> are just syntactic constructs.</p>
</li>
<li>
<p>The form is <code>let &lt;binding&gt; in &lt;expr&gt;</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; cylinder :: (RealFloat a) =&gt; a -&gt; a -&gt; a
ghci| cylinder r h =
ghci|      let sideArea = 2 * pi * r * h
ghci|          topArea = pi * r ^2
ghci|          in sideArea + 2 * topArea

ghci&gt; [let square x = x * x in (square 5, square 3, square 2)]
[(25,9,4)]

ghci&gt; calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]
ghci| calcBmis xs = [bmi | (w, h) &lt;- xs, let bmi = w / h ^ 2, bmi &gt;= 25.0]</code></pre>
</div>
</div>
</li>
<li>
<p>To use it inside list comprehensions is not a filter</p>
</li>
<li>
<p>Names defined are visible to the part before the <code>|</code></p>
</li>
<li>
<p>The in part can also be omitted when defining functions and constants directly in GHCi. If we do that, then the names will be visible throughout the entire interactive session.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; let zoot x y z = x * y + z
ghci&gt; zoot 3 9 2
29

ghci&gt; let boot x y z = x * y + z in boot 3 4 2
14

ghci&gt; boot
&lt;interactive&gt;:1:0: Not in scope: `boot'</code></pre>
</div>
</div>
</li>
</ul>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/28/Let-it-be-in-haskell.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/28/Let-it-be-in-haskell.html</guid><pubDate>Sun, 28 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Case expressions]]></title><description><![CDATA[<div class="ulist">
<ul>
<li>
<p><code>case</code> expressions are, well, expressions, much like <code>if else</code> expressions and <code>let</code> bindings.</p>
</li>
<li>
<p>Form is`case expression of pattern &#8594; result &#8230;&#8203;`</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; head' :: [a] -&gt; a  h
ghci| head' xs = case xs of [] -&gt; error "No head for empty lists!"
                            (x:_) -&gt; x</code></pre>
</div>
</div>
</li>
<li>
<p><code>case</code> expressions can be used pretty much anywhere.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; describeList :: [a] -&gt; String
ghci| describeList xs = "The list is " ++
ghci|         case xs of [] -&gt; "empty."
ghci|                    [x] -&gt; "a singleton list."
ghci|                     xs -&gt; "a longer list."

//same way
ghci&gt; describeList :: [a] -&gt; String
ghci| describeList xs = "The list is " ++ what xs
ghci|    where what [] = "empty."
ghci|          what [x] = "a singleton list."
ghci|          what xs = "a longer list."</code></pre>
</div>
</div>
</li>
<li>
<p>They are useful for pattern matching against something in the middle of an expression.</p>
</li>
</ul>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/28/Case-expressions.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/28/Case-expressions.html</guid><pubDate>Sun, 28 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Where in haskell]]></title><description><![CDATA[<div class="ulist">
<ul>
<li>
<p>Using <code>where</code> after the guards and then we define several names or functions. These names are visible across the guards and give us the advantage of not having to repeat ourselves.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; let bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String
ghci&gt; bmiTell weight height
    | bmi &lt;= skinny = "You're underweight, you emo, you!"
    | bmi &lt;= normal = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi &lt;= fat    = "You're fat! Lose some weight, fatty!"
    | otherwise     = "You're a whale, congratulations!"
    where bmi = weight / height ^ 2
          skinny = 18.5
          normal = 25.0
          fat = 30.0
// different way
where bmi weight / height ^ 2
      (skinny, normal, fat) = (18.5, 25.0, 30.0)</code></pre>
</div>
</div>
</li>
<li>
<p><code>where</code> section of a function are only visible to that function, so we don&#8217;t have to worry about them polluting the namespace of other functions.</p>
</li>
<li>
<p>In <code>where</code> block, we defined constants and functions.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">gchi&gt; let calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]
          calcBmis xs = [bmi w h | (w, h) &lt;- xs]
              where bmi weight height = weight / height ^ 2</code></pre>
</div>
</div>
</li>
</ul>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/27/Where-in-haskell.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/27/Where-in-haskell.html</guid><pubDate>Sat, 27 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Regular Expression]]></title><description><![CDATA[<div class="olist arabic">
<ol class="arabic">
<li>
<p>Table of Keyword</p>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-center valign-top">Key</th>
<th class="tableblock halign-center valign-top">Desc</th>
<th class="tableblock halign-center valign-top">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">.</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">anyone char</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a.b</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">zero or one or more</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a*b</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">+</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">one or more</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a+b</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">?</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">zero or one</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a?b</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">^</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">start of line</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">^ab</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">$</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">end of line</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">ab$</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">[]</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">two char of range by using -</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">[a-z],[0-9],[a-zA-Z]</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">{}</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">repeat of char</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a{1,3}b</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">()</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">all elements is one</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a(bc){2}</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">|</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">or operator</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">a(a|c)d</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\s</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">include '', \t, \n, \f, \r, \x0b</p></td>
<td class="tableblock halign-center valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\S</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">exclude ''</p></td>
<td class="tableblock halign-center valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\w</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">alphabet or number</p></td>
<td class="tableblock halign-center valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\W</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">not \w</p></td>
<td class="tableblock halign-center valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\d</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">number</p></td>
<td class="tableblock halign-center valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\D</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">not \d</p></td>
<td class="tableblock halign-center valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">(?i)</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">ignore upper and lower case</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">(?!)abc</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">\</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">escape expression</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">|, \*</p></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>To use in practice</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">^([a-z0-9A-Z_\.-]+)@([a-z0-9A-Z_\.-]+)\.([a-zA-Z\.]{2,6})$
//filter email
^\S+\.(?i)(png|jpg|bmp|gif)$
//filter image files
^&lt;([a-z]+)([^&lt;]+)*(&gt;(.*)&lt;\/\1&gt;|\s*\/&gt;)$
//form of html tag ref) \1 first group</code></pre>
</div>
</div>
</li>
</ol>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/26/Regular-Expression.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/26/Regular-Expression.html</guid><pubDate>Fri, 26 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Pattern matching in haskell]]></title><description><![CDATA[<div class="ulist">
<ul>
<li>
<p>You can define separate function bodies for difference patterns, This code is simple and readable</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; let lucky :: (Integral a) =&gt; a -&gt; String
ghci|     lucky 7 = "LUCKY NUMBER SEVEN!"
ghci|     lucky x = "Sorry, you're out of luck, pal!"</code></pre>
</div>
</div>
</li>
<li>
<p>When making patterns, we should always include a catch all pattern so that out program doesn&#8217;t crash if we get some unjexpected input.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; let charName :: char -&gt; String
ghci|     charName 'a' = "Albert"
ghci|     charName 'b' = "Broseph"

ghci&gt; charName 'a'
"Albert"
ghci&gt; charName 'h'
"*** Exception: Non-exhaustive patterns in function charName</code></pre>
</div>
</div>
</li>
<li>
<p><code>_</code> means that we really don&#8217;t care what that part is</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; let first :: (a, b, c) -&gt; a
ghci|     first (x, _, _) = x

ghci&gt; first(1, True, "abc")
1

ghci&gt; let sum' :: (Num a) =&gt; [a] -&gt; a
ghci|     sum' [] = 0
ghci|     sum' (x:xs) = x + sum' xs

ghci&gt; sum' [1 .. 10]
55</code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
You cannot use <code>&#43;&#43;</code> in pattern matches. instead of <code>(xs &#43;&#43; ys) &#8594; (xs &#43;&#43; [x])</code>
</td>
</tr>
</table>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/26/Pattern-matching-in-haskell.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/26/Pattern-matching-in-haskell.html</guid><pubDate>Fri, 26 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Guards, guards in haskell]]></title><description><![CDATA[<div class="ulist">
<ul>
<li>
<p>Guards are a way of testing whether some property of a value are ture or false. like if statements refer to below</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; let bmiTell :: (RealFloat a) =&gt; a -&gt; String
ghci|     bmiTell bmi
ghci|      |    bmi &lt;= 18.5 = "You're underweight, you emo, you!"
ghci|      |    bmi &lt;= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
ghci|      |    bmi &lt;= 30.0 = "You're fat! Lose some weight, fatty!"
ghci|      |    otherwise = "You're a whale, congratulations!"
ghci|
bmiTell :: RealFloat a =&gt; a -&gt; String</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
There&#8217;s no <code>=</code> right after the function name and its parameters
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Guards are indicated by pipes that follow a function&#8217;s name and its parameters</p>
</li>
</ul>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/26/Guards-guards-in-haskell.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/26/Guards-guards-in-haskell.html</guid><pubDate>Fri, 26 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Typeclasses in haskell]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>You can think of them kind of as Java interface and unlike classes in OOP</p>
</li>
<li>
<p>What&#8217;s the type signature of the <code>==</code> function?</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; :t (==)
(==) :: (Eq a) =&gt; a -&gt; a -&gt; Bool
//`=&gt;` class constraint</code></pre>
</div>
</div>
</li>
<li>
<p>Eq, Ord, Show, Read, Enum, Bounded, Num, Integral, Floating</p>
</li>
<li>
<p>CHCI could infer what kind of result we wanted out of read.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; read "4"
&lt;interactive&gt;:1:0:
    Ambiguous type variable `a' in the constraint:
      `Read a' arising from a use of `read' at &lt;interactive&gt;:1:0-7
    Probable fix: add a type signature that fixes these type variable(s)</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sh" data-lang="sh">ghci&gt; read "5" :: Int
5
it :: Int

ghci&gt; [1 .. 5]
[1,2,3,4,5]
it :: (Enum t, Num t) =&gt; [t]
ghci&gt; succ 'b'
'c'
it :: Char
ghci&gt; pred 'b'
'a'
it :: Char

ghci&gt; maxBound :: Char
'\1114111'
it :: Char</code></pre>
</div>
</div>
</li>
<li>
<p>In this case, we can use explicit <strong>Type annotations</strong> by adding <code>::</code> refer to above</p>
</li>
<li>
<p>객체지향언어에 클래스들과 타입클래스는 다르다, 오히려 자바에 인터페이스 정도로 생각됨</p>
</li>
<li>
<p>타입추론이 항상 잘 될꺼라는 가정은 접어두시길</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reference">Reference</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="http://learnyouahaskell.com/types-and-typeclasses" class="bare">http://learnyouahaskell.com/types-and-typeclasses</a></p>
</div>
</div>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/21/Typeclasses-in-haskell.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/21/Typeclasses-in-haskell.html</guid><pubDate>Sun, 21 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[First hubpress]]></title><description><![CDATA[<div class="sect1">
<h2 id="_getting_started">Getting started</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Fork the repository</p>
</li>
<li>
<p>Configure the correct branch</p>
<div class="olist upperalpha">
<ol class="upperalpha" type="A">
<li>
<p>To use a custom domain</p>
<div class="olist upperroman">
<ol class="upperroman" type="I">
<li>
<p>set the default branch to <code>gh-pages</code></p>
</li>
<li>
<p>switch <code>gh-pages</code> branch</p>
</li>
<li>
<p>set values in <code>hubpress/config.json</code> refer to below</p>
<div class="listingblock">
<div class="title">config.json</div>
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "meta": {
    "username": "put your username here ex) username",
    "repositoryName": "put your repository name here ex) hubpress.io",
    "branch": "gh-pages"
  },
  "theme": {
    "name": "casper"
  }
}</code></pre>
</div>
</div>
</li>
<li>
<p>Commit changes and Open <a href="https://username.github.io/repostoryName/" class="bare">https://username.github.io/repostoryName/</a>
refer to below</p>
<div class="imageblock">
<div class="content">
<img src="https://camo.githubusercontent.com/bd45364c6c64475d1816cef50ddc8395f0f4165b/687474703a2f2f68756270726573732e696f2f696d672f686f6d652d696e7374616c6c2e706e67" alt="completeimg" width="300" height="318">
</div>
</div>
</li>
<li>
<p>Open <a href="https://username.github.io/repostoryName/hubpress" class="bare">https://username.github.io/repostoryName/hubpress</a> and Use Github info to Login</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
</ol>
</div>
</div>
</div>]]></description><link>https://seturne.github.io/hubpress.io/2017/05/21/First-hubpress.html</link><guid isPermaLink="true">https://seturne.github.io/hubpress.io/2017/05/21/First-hubpress.html</guid><pubDate>Sun, 21 May 2017 00:00:00 GMT</pubDate></item></channel></rss>